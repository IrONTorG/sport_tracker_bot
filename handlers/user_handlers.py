import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from database.session import get_db_session
from database.models import User, Workout
from keyboards.main_menu import get_main_menu

router = Router()


async def get_user(session: AsyncSession, telegram_id: int) -> User | None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    return result.scalars().first()


async def get_user_stats(session: AsyncSession, user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    workouts_count = await session.execute(
        select(func.count(Workout.workout_id)).where(Workout.user_id == user_id))
    workouts_count = workouts_count.scalar()

    total_duration = await session.execute(
        select(func.sum(Workout.duration)).where(Workout.user_id == user_id))
    total_duration = total_duration.scalar() or 0

    total_calories = await session.execute(
        select(func.sum(Workout.calories)).where(Workout.user_id == user_id))
    total_calories = total_calories.scalar() or 0

    # –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    duration_rank = await session.execute(
        select(func.count(User.user_id))
        .select_from(User)
        .join(Workout)
        .group_by(User.user_id)
        .having(func.sum(Workout.duration) > total_duration)
    )
    duration_rank = duration_rank.scalar() or 0

    calories_rank = await session.execute(
        select(func.count(User.user_id))
        .select_from(User)
        .join(Workout)
        .group_by(User.user_id)
        .having(func.sum(Workout.calories) > total_calories)
    )
    calories_rank = calories_rank.scalar() or 0

    workouts_rank = await session.execute(
        select(func.count(User.user_id))
        .select_from(User)
        .join(Workout)
        .group_by(User.user_id)
        .having(func.count(Workout.workout_id) > (workouts_count or 0)
                ))
    workouts_rank = workouts_rank.scalar() or 0

    total_users = await session.execute(select(func.count(User.user_id)))
    total_users = total_users.scalar()

    return {
        'workouts_count': workouts_count or 0,
        'total_duration': total_duration,
        'total_calories': total_calories,
        'duration_rank': duration_rank + 1,
        'calories_rank': calories_rank + 1,
        'workouts_rank': workouts_rank + 1,
        'total_users': total_users
    }


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    async for session in get_db_session():
        try:
            user = await get_user(session, message.from_user.id)

            if not user:
                new_user = User(
                    telegram_id=message.from_user.id,
                    name=message.from_user.full_name
                )
                session.add(new_user)
                await session.commit()
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
                    reply_markup=get_main_menu()
                )
            else:
                await message.answer(
                    "üîÑ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
                    reply_markup=get_main_menu(user.is_admin)
                )
        except Exception as e:
            await session.rollback()
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            logging.error(f"Error in cmd_start: {e}")


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    async for session in get_db_session():
        try:
            user = await get_user(session, message.from_user.id)

            if user:
                stats = await get_user_stats(session, user.user_id)

                await message.answer(
                    f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                    f"ID: {user.user_id}\n"
                    f"–ò–º—è: {user.name}\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y')}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
                    f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['workouts_count']}\n"
                    f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']} –º–∏–Ω\n"
                    f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {stats['total_calories']}\n\n"
                    f"üèÜ –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:\n"
                    f"–ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {stats['duration_rank']}/{stats['total_users']}\n"
                    f"–ü–æ –∫–∞–ª–æ—Ä–∏—è–º: {stats['calories_rank']}/{stats['total_users']}\n"
                    f"–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: {stats['workouts_rank']}/{stats['total_users']}"
                )
            else:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        except Exception as e:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
            logging.error(f"Error in cmd_profile: {e}")