import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from database.session import get_db_session
from database.models import User
from keyboards.main_menu import get_main_menu

router = Router()

async def get_user(session: AsyncSession, telegram_id: int) -> User | None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    return result.scalars().first()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    async for session in get_db_session():
        try:
            user = await get_user(session, message.from_user.id)

            if not user:
                new_user = User(
                    telegram_id=message.from_user.id,
                    name=message.from_user.full_name
                )
                session.add(new_user)
                await session.commit()
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
                    reply_markup=get_main_menu()
                )
            else:
                await message.answer(
                    "üîÑ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
                    reply_markup=get_main_menu(user.is_admin)
                )
        except Exception as e:
            await session.rollback()
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            logging.error(f"Error in cmd_start: {e}")

@router.message(Command("profile"))
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile"""
    async for session in get_db_session():
        try:
            user = await get_user(session, message.from_user.id)

            if user:
                await message.answer(
                    f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                    f"ID: {user.user_id}\n"
                    f"–ò–º—è: {user.name}\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y')}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
                )
            else:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        except Exception as e:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
            logging.error(f"Error in cmd_profile: {e}")