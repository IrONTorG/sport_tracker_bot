import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, \
    KeyboardButton
from aiogram.filters import Command
from sqlalchemy import select, func, delete
from sqlalchemy.ext.asyncio import AsyncSession
from database.session import get_db_session
from database.models import User, Workout, Exercise, Reminder
from keyboards.main_menu import get_main_menu, get_help_text, get_settings_menu
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states import UserStates

router = Router()


async def get_user(session: AsyncSession, telegram_id: int) -> User | None:
    """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    return result.scalars().first()


async def get_user_stats(session: AsyncSession, user_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –ø–æ–∑–∏—Ü–∏—é –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ"""
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    workouts_count = await session.execute(
        select(func.count(Workout.workout_id)).where(Workout.user_id == user_id))
    workouts_count = workouts_count.scalar()

    total_duration = await session.execute(
        select(func.sum(Workout.duration)).where(Workout.user_id == user_id))
    total_duration = total_duration.scalar() or 0

    total_calories = await session.execute(
        select(func.sum(Workout.calories)).where(Workout.user_id == user_id))
    total_calories = total_calories.scalar() or 0

    # –ü–æ–∑–∏—Ü–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ
    duration_rank = await session.execute(
        select(func.count(User.user_id))
        .select_from(User)
        .join(Workout)
        .group_by(User.user_id)
        .having(func.sum(Workout.duration) > total_duration)
    )
    duration_rank = duration_rank.scalar() or 0

    calories_rank = await session.execute(
        select(func.count(User.user_id))
        .select_from(User)
        .join(Workout)
        .group_by(User.user_id)
        .having(func.sum(Workout.calories) > total_calories)
    )
    calories_rank = calories_rank.scalar() or 0

    workouts_rank = await session.execute(
        select(func.count(User.user_id))
        .select_from(User)
        .join(Workout)
        .group_by(User.user_id)
        .having(func.count(Workout.workout_id) > (workouts_count or 0)
                ))
    workouts_rank = workouts_rank.scalar() or 0

    total_users = await session.execute(select(func.count(User.user_id)))
    total_users = total_users.scalar()

    return {
        'workouts_count': workouts_count or 0,
        'total_duration': total_duration,
        'total_calories': total_calories,
        'duration_rank': duration_rank + 1,
        'calories_rank': calories_rank + 1,
        'workouts_rank': workouts_rank + 1,
        'total_users': total_users
    }


@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    async for session in get_db_session():
        try:
            user = await get_user(session, message.from_user.id)

            if not user:
                new_user = User(
                    telegram_id=message.from_user.id,
                    name=message.from_user.full_name
                )
                session.add(new_user)
                await session.commit()
                await message.answer(
                    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á—ë—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.",
                    reply_markup=get_main_menu()
                )
            else:
                await message.answer(
                    "üîÑ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!",
                    reply_markup=get_main_menu(user.is_admin)
                )
        except Exception as e:
            await session.rollback()
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
            logging.error(f"Error in cmd_start: {e}")


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
async def cmd_profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile –∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è"""
    async for session in get_db_session():
        try:
            user = await get_user(session, message.from_user.id)

            if user:
                stats = await get_user_stats(session, user.user_id)

                await message.answer(
                    f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
                    f"ID: {user.user_id}\n"
                    f"–ò–º—è: {user.name}\n"
                    f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y')}\n"
                    f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\n"
                    f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['workouts_count']}\n"
                    f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']} –º–∏–Ω\n"
                    f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {stats['total_calories']}\n\n"
                    f"üèÜ –í–∞—à–µ –º–µ—Å—Ç–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:\n"
                    f"–ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {stats['duration_rank']}/{stats['total_users']}\n"
                    f"–ü–æ –∫–∞–ª–æ—Ä–∏—è–º: {stats['calories_rank']}/{stats['total_users']}\n"
                    f"–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É: {stats['workouts_rank']}/{stats['total_users']}"
                )
            else:
                await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ /start")
        except Exception as e:
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è")
            logging.error(f"Error in cmd_profile: {e}")

@router.message(F.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏"""
    from keyboards.main_menu import get_help_text
    await message.answer(
        get_help_text(),
        parse_mode="HTML"
    )


@router.message(F.text == "üì® –°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")
async def contact_admin(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    admin_id = 644959718  # –í–∞—à Telegram ID
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(
        text="–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
        url=f"tg://user?id={admin_id}")
    )

    await message.answer(
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –Ω–∞–ø—Ä—è–º—É—é:",
        reply_markup=builder.as_markup()
    )


@router.message(F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
async def delete_account_confirmation(message: Message):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_delete"),
        InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_delete")
    )

    await message.answer(
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –≤–∫–ª—é—á–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_delete")
async def delete_account(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    async for session in get_db_session():
        try:
            user = await get_user(session, callback.from_user.id)
            if not user:
                return await callback.answer("‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await session.execute(delete(Exercise).where(Exercise.workout_id.in_(
                select(Workout.workout_id).where(Workout.user_id == user.user_id)
            )))
            await session.execute(delete(Workout).where(Workout.user_id == user.user_id))
            await session.execute(delete(Reminder).where(Reminder.user_id == user.user_id))
            await session.execute(delete(User).where(User.user_id == user.user_id))

            await session.commit()

            await callback.message.edit_text(
                "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.\n"
                "–î–ª—è –Ω–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ /start"
            )
        except Exception as e:
            await session.rollback()
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞", show_alert=True)
            logging.error(f"Error deleting account: {e}")


@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞"""
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç:",
        reply_markup=get_settings_menu(),
        parse_mode="HTML"
    )

@router.message(F.text == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è")
async def change_name(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏"""
    await message.answer(
        "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]],
            resize_keyboard=True
        )
    )
    await state.set_state(UserStates.waiting_for_new_name)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_action(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è"""
    await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_menu()
    )

@router.message( F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_menu_from_pagination(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    async for session in get_db_session():
        user = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id))
        user = user.scalar_one()
        await state.clear()
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu(user.is_admin)
        )

@router.message(UserStates.waiting_for_new_name)
async def process_new_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏"""
    new_name = message.text.strip()
    if len(new_name) < 2:
        return await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")

    async for session in get_db_session():
        try:
            user = await get_user(session, message.from_user.id)
            if user:
                user.name = new_name
                await session.commit()
                await message.answer(
                    f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞: {new_name}",
                    reply_markup=get_main_menu(user.is_admin)
                )
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except Exception as e:
            await session.rollback()
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–º–µ–Ω–∏")
            logging.error(f"Error changing name: {e}")
    await state.clear()