import logging
from datetime import datetime, time, timedelta

from typing import Union
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete
from database.session import get_db_session
from database.models import Reminder, User
from states import ReminderStates
from sqlalchemy import update
import pytz
from keyboards.main_menu import get_main_menu
from keyboards.reminder import (
    get_weekdays_kb,
    reminders_control_kb,
    edit_reminder_kb,
    common_times_kb
)

router = Router()

WEEKDAYS = {
    "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": "Monday",
    "–≤—Ç–æ—Ä–Ω–∏–∫": "Tuesday",
    "—Å—Ä–µ–¥–∞": "Wednesday",
    "—á–µ—Ç–≤–µ—Ä–≥": "Thursday",
    "–ø—è—Ç–Ω–∏—Ü–∞": "Friday",
    "—Å—É–±–±–æ—Ç–∞": "Saturday",
    "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": "Sunday"
}


@router.message(F.text == "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
@router.message(Command("remind"))
async def handle_reminders_command(message: Message):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await message.answer(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:",
        reply_markup=reminders_control_kb([])  # –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —Ç–∞–∫ –∫–∞–∫ –∫–Ω–æ–ø–∫–∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    )

@router.callback_query(F.data.startswith("rem_view_"))
async def view_reminder(callback: CallbackQuery):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        reminder_id = int(callback.data.split('_')[2])
        async for session in get_db_session():
            reminder = await session.execute(
                select(Reminder).where(Reminder.reminder_id == reminder_id)
            )
            reminder = reminder.scalar_one_or_none()

            if not reminder:
                await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            await callback.message.edit_text(
                f"üìÖ –î–µ–Ω—å: {reminder.day_of_week}\n"
                f"‚è∞ –í—Ä–µ–º—è: {reminder.reminder_time.strftime('%H:%M')}\n"
                f"üìù –¢–µ–∫—Å—Ç: {reminder.reminder_text}",
                reply_markup=edit_reminder_kb(reminder_id)
            )
            await callback.answer()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

@router.callback_query(F.data == "rem_delete_all")
async def delete_all_reminders(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        async for session in get_db_session():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user.scalar_one_or_none()

            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            await session.execute(
                delete(Reminder).where(Reminder.user_id == user.user_id)
            )
            await session.commit()

            await callback.message.answer("‚úÖ –í—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã")
    except Exception as e:
        await session.rollback()
        logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    finally:
        await callback.answer()

@router.message(F.text == "üîî –ú–æ–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def handle_my_reminders_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    await show_user_reminders(message)

async def show_user_reminders(event: Union[Message, CallbackQuery]):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    try:
        async for session in get_db_session():
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = await session.execute(
                select(User).where(User.telegram_id == event.from_user.id)
            )
            user = user.scalar_one_or_none()

            if not user:
                response = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                if isinstance(event, CallbackQuery):
                    await event.answer(response)
                else:
                    await event.answer(response)
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            reminders = await session.execute(
                select(Reminder).where(Reminder.user_id == user.user_id)
            )
            reminders = reminders.scalars().all()

            if not reminders:
                response = "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."
                if isinstance(event, CallbackQuery):
                    await event.message.answer(response)
                    await event.answer()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback
                else:
                    await event.answer(response)
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫
            reminders_list = []
            for rem in reminders:
                reminders_list.append({
                    'id': rem.reminder_id,
                    'day': rem.day_of_week,
                    'time': rem.reminder_time.strftime("%H:%M"),
                    'text': rem.reminder_text[:30] + "..." if len(rem.reminder_text) > 30 else rem.reminder_text
                })

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:"
            if isinstance(event, CallbackQuery):
                try:
                    await event.message.edit_text(
                        response,
                        reply_markup=reminders_control_kb(reminders_list)
                    )
                except Exception as e:
                    await event.message.answer(
                        response,
                        reply_markup=reminders_control_kb(reminders_list)
                    )
                await event.answer()  # –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
            else:
                await event.answer(
                    response,
                    reply_markup=reminders_control_kb(reminders_list)
                )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        response = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"
        if isinstance(event, CallbackQuery):
            await event.message.answer(response)
            await event.answer()
        else:
            await event.answer(response)


@router.callback_query(F.data == "rem_create_new")
async def create_new_reminder(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
        reply_markup=get_weekdays_kb()
    )
    await state.set_state(ReminderStates.waiting_for_day)
    await callback.answer()


@router.message(ReminderStates.waiting_for_day)
async def process_day_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    day = message.text.strip().lower()
    if day not in WEEKDAYS:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
            reply_markup=get_weekdays_kb()
        )
        return

    await state.update_data(day=WEEKDAYS[day])
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:",
        reply_markup=common_times_kb()
    )
    await state.set_state(ReminderStates.waiting_for_time)


@router.message(ReminderStates.waiting_for_time)
async def process_time_input(message: Message, state: FSMContext):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        time_str = message.text.strip()
        hours, minutes = map(int, time_str.split(':'))
        if not (0 <= hours < 24 and 0 <= minutes < 60):
            raise ValueError

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É "HH:MM:SS"
        await state.update_data(time=f"{hours:02d}:{minutes:02d}:00")
        await state.set_state(ReminderStates.waiting_for_text)
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
            reply_markup=ReplyKeyboardRemove()
        )
    except (ValueError, AttributeError):
        await message.answer(
            "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∫–∞–∫ –ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä: 07:30 –∏–ª–∏ 19:45",
            reply_markup=common_times_kb()
        )


@router.message(ReminderStates.waiting_for_text)
async def process_reminder_text(message: Message, state: FSMContext):
    data = await state.get_data()
    time_str = data['time']  # "HH:MM:SS"

    try:
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç time –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
        h, m, s = map(int, time_str.split(':'))
        reminder_time = time(hour=h, minute=m, second=s)

        async for session in get_db_session():
            # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
            reminder = Reminder(
                user_id=(await session.execute(
                    select(User.user_id).where(User.telegram_id == message.from_user.id)
                )).scalar_one(),
                reminder_text=message.text,
                reminder_time=reminder_time,
                day_of_week=data['day']
            )

            session.add(reminder)
            await session.commit()

            await message.answer(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {time_str[:8]}",
                parse_mode=None
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", exc_info=True)
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    finally:
        await state.clear()


@router.callback_query(F.data == "rem_my_reminders")
async def handle_my_reminders_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∫–Ω–æ–ø–∫–∏"""
    await show_user_reminders(callback)
    try:
        async for session in get_db_session():
            user = await session.execute(
                select(User).where(User.telegram_id == callback.from_user.id)
            )
            user = user.scalar_one_or_none()

            if not user:
                await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            reminders = await session.execute(
                select(Reminder).where(Reminder.user_id == user.user_id)
            )
            reminders = reminders.scalars().all()

            if not reminders:
                await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
                await callback.answer()
                return

            reminders_list = []
            for rem in reminders:
                reminders_list.append({
                    'id': rem.reminder_id,
                    'day': rem.day_of_week,
                    'time': rem.reminder_time.strftime("%H:%M"),
                    'text': rem.reminder_text[:30] + "..." if len(rem.reminder_text) > 30 else rem.reminder_text
                })

            await callback.message.edit_text(
                "–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:",
                reply_markup=reminders_control_kb(reminders_list)
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
    finally:
        await callback.answer()

@router.callback_query(F.data.startswith("rem_edit_text_"))
async def edit_reminder_text(callback: CallbackQuery, state: FSMContext):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = int(callback.data.split('_')[3])
    await state.update_data(reminder_id=reminder_id)
    await state.set_state(ReminderStates.editing_text)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")
    await callback.answer()

@router.message(ReminderStates.editing_text)
async def process_edit_text(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞"""
    data = await state.get_data()
    async for session in get_db_session():
        try:
            await session.execute(
                update(Reminder)
                .where(Reminder.reminder_id == data['reminder_id'])
                .values(reminder_text=message.text)
            )
            await session.commit()
            await message.answer("‚úÖ –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª—ë–Ω")
        except Exception as e:
            await session.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç")
        finally:
            await state.clear()


@router.callback_query(F.data.startswith("rem_delete_"))
async def delete_reminder(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminder_id = int(callback.data.split('_')[2])
    async for session in get_db_session():
        try:
            await session.execute(
                delete(Reminder).where(Reminder.reminder_id == reminder_id))
            await session.commit()
            await callback.message.answer("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        except Exception as e:
            await session.rollback()
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
        finally:
            await callback.answer()


@router.message(Command("test_reminder"))
async def test_reminder(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è + 1 –º–∏–Ω—É—Ç–∞
        test_time = (datetime.now() + timedelta(minutes=1)).time()

        async for session in get_db_session():
            user = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id)
            )
            user = user.scalar_one()

            reminder = Reminder(
                user_id=user.user_id,
                reminder_text="üî¥ –≠–¢–û –¢–ï–°–¢–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï!",
                reminder_time=datetime.combine(datetime.today(), test_time),
                day_of_week=datetime.now().strftime("%A")
            )

            session.add(reminder)
            await session.commit()

            await message.answer(
                f"‚è∞ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                f"–û–Ω–æ –ø—Ä–∏–¥–µ—Ç –≤ {test_time.strftime('%H:%M')}\n"
                f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}"
            )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")

@router.message(Command("time"))
async def check_time(message: Message):
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    await message.answer(
        f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞:\n"
        f"{now.strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏: {now.strftime('%A')}"
    )

@router.message(Command("force_reminder"))
async def force_reminder(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    try:
        await message.answer("üîî –¢–ï–°–¢–û–í–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï!")
        logging.info("–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

@router.message(Command("test_time"))
async def test_time_format(message: Message):
    test_time = time(hour=12, minute=30, second=0)
    await message.answer(
        f"–¢–µ—Å—Ç–æ–≤–æ–µ –≤—Ä–µ–º—è: {test_time}\n"
        f"–¢–∏–ø: {type(test_time)}\n"
        f"–í –ë–î –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {test_time.strftime('%H:%M:%S')}",
        parse_mode=None  # –û—Ç–∫–ª—é—á–∞–µ–º —Ä–∞–∑–º–µ—Ç–∫—É
    )

@router.message(Command("check_reminders"))
async def check_reminders(message: Message):
    async for session in get_db_session():
        reminders = await session.execute(select(Reminder))
        for rem in reminders.scalars():
            await message.answer(
                f"ID: {rem.reminder_id}\n"
                f"–í—Ä–µ–º—è: {rem.reminder_time}\n"
                f"–¢–∏–ø: {type(rem.reminder_time)}",
                parse_mode=None
            )