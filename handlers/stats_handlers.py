from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from sqlalchemy import select, func
from database.session import get_db_session
from database.models import Workout, User  # Added User import
from keyboards.stats import get_stats_period_kb
import logging
from sqlalchemy.orm import joinedload
from aiogram.types import BufferedInputFile
import csv
import json
import io
import matplotlib.pyplot as plt

router = Router()


@router.message(F.text == "üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats_menu(message: Message):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=get_stats_period_kb()
    )


@router.callback_query(F.data.startswith("stats_"))
async def process_stats_period(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    period = callback.data.split('_')[1]
    async for session in get_db_session():
        try:
            user_id = callback.from_user.id

            # Get user from database first
            user = await session.execute(
                select(User).where(User.telegram_id == user_id))
            user = user.scalar_one_or_none()

            if not user:
                await callback.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            end_date = datetime.now()
            if period == "day":
                start_date = end_date - timedelta(days=1)
            elif period == "week":
                start_date = end_date - timedelta(weeks=1)
            elif period == "month":
                start_date = end_date - timedelta(days=30)
            else:
                start_date = datetime.min  # –î–ª—è "–≤—Å–µ –≤—Ä–µ–º—è"

            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = await session.execute(
                select(
                    func.count(Workout.workout_id).label("workouts_count"),
                    func.coalesce(func.sum(Workout.duration), 0).label("total_duration"),
                    func.coalesce(func.sum(Workout.calories), 0).label("total_calories"),
                    func.coalesce(func.sum(Workout.distance), 0).label("total_distance")
                ).where(
                    Workout.user_id == user.user_id,  # Use database user_id
                    Workout.date >= start_date,
                    Workout.date <= end_date
                )
            )
            stats = stats.first()

            if not stats.workouts_count:
                await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {period}:\n"
                f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats.workouts_count}\n"
                f"‚Ä¢ –û–±—â–µ–µ –≤—Ä–µ–º—è: {stats.total_duration:.1f} –º–∏–Ω.\n"
                f"‚Ä¢ –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {stats.total_calories:.0f} –∫–∫–∞–ª\n"
                f"‚Ä¢ –û–±—â–∞—è –¥–∏—Å—Ç–∞–Ω—Ü–∏—è: {stats.total_distance:.1f} –∫–º"
            )

            await callback.message.answer(message_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
        finally:
            await callback.answer()


async def generate_workout_csv(workouts: list) -> io.StringIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏"""
    output = io.StringIO()
    writer = csv.writer(output, delimiter=',')  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
    writer.writerow([
        "–î–∞—Ç–∞",
        "–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)",
        "–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π (–∫–∫–∞–ª)",
        "–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)",
        "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
        "–ü–æ–¥—Ö–æ–¥—ã",
        "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è",
        "–í–µ—Å (–∫–≥)",
        "–ó–∞–º–µ—Ç–∫–∏"
    ])

    for workout in workouts:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Å–∏–ª–æ–≤—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        exercises = ""
        sets = ""
        reps = ""
        weight = ""

        if workout.exercises:
            exercises = ", ".join([ex.name for ex in workout.exercises])
            if workout.type == "strength" and workout.exercises:
                sets = f"{workout.exercises[0].sets}"
                reps = f"{workout.exercises[0].reps}"
                weight = f"{workout.exercises[0].weight} –∫–≥" if workout.exercises[0].weight else ""

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        writer.writerow([
            workout.date.strftime("%Y-%m-%d %H:%M"),
            workout.type,
            f"{workout.duration} –º–∏–Ω" if workout.duration else "",
            f"{workout.calories} –∫–∫–∞–ª" if workout.calories else "",
            f"{workout.distance} –∫–º" if workout.distance else "",
            exercises,
            sets,
            reps,
            weight,
            workout.notes if workout.notes else ""
        ])

    output.seek(0)
    return output


async def generate_workout_json(workouts: list) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JSON —Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏"""
    result = []

    for workout in workouts:
        workout_data = {
            "date": workout.date.strftime("%Y-%m-%d %H:%M"),
            "type": workout.type,
            "duration": workout.duration,
            "calories": workout.calories,
            "distance": workout.distance,
            "notes": workout.notes,
            "exercises": []
        }

        for exercise in workout.exercises:
            workout_data["exercises"].append({
                "name": exercise.name,
                "sets": exercise.sets,
                "reps": exercise.reps,
                "weight": exercise.weight
            })

        result.append(workout_data)

    return json.dumps(result, indent=2, ensure_ascii=False)


async def generate_progress_chart(workouts: list) -> io.BytesIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    dates = []
    calories = []
    durations = []

    for workout in workouts:
        dates.append(workout.date)
        calories.append(workout.calories)
        durations.append(workout.duration)

    plt.figure(figsize=(10, 6))

    # –ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π
    plt.subplot(2, 1, 1)
    plt.plot(dates, calories, 'r-', label='–ö–∞–ª–æ—Ä–∏–∏')
    plt.ylabel('–ö–∞–ª–æ—Ä–∏–∏')
    plt.title('–ü—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')
    plt.grid(True)

    # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    plt.subplot(2, 1, 2)
    plt.plot(dates, durations, 'b-', label='–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)')
    plt.ylabel('–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)')
    plt.xlabel('–î–∞—Ç–∞')
    plt.grid(True)

    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    return buf


@router.callback_query(F.data.startswith("export_"))
async def export_workouts(callback: CallbackQuery):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ CSV –∏–ª–∏ JSON"""
    format_type = callback.data.split('_')[1]

    async for session in get_db_session():
        try:
            user = await session.execute(
                select(User).where(User.telegram_id == callback.from_user.id))
            user = user.scalar_one()

            result = await session.execute(
                select(Workout)
                .where(Workout.user_id == user.user_id)
                .order_by(Workout.date)
                .options(joinedload(Workout.exercises))
            )
            workouts = result.unique().scalars().all()

            if not workouts:
                await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return

            if format_type == "csv":
                csv_file = await generate_workout_csv(workouts)
                await callback.message.answer_document(
                    BufferedInputFile(
                        csv_file.getvalue().encode('utf-8-sig'),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º utf-8-sig –¥–ª—è Excel
                        filename=f"workouts_{user.user_id}.csv"
                    ),
                    caption="–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV"
                )
            elif format_type == "json":
                json_data = await generate_workout_json(workouts)
                await callback.message.answer_document(
                    BufferedInputFile(
                        json_data.encode('utf-8'),
                        filename=f"workouts_{user.user_id}.json"
                    ),
                    caption="–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON"
                )

            await callback.answer()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")


async def generate_workout_csv(workouts: list) -> io.StringIO:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏"""
    output = io.StringIO()
    writer = csv.writer(output)

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
    writer.writerow([
        "–î–∞—Ç–∞", "–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)",
        "–ö–∞–ª–æ—Ä–∏–∏", "–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)", "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è", "–ü–æ–¥—Ö–æ–¥—ã",
        "–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è", "–í–µ—Å (–∫–≥)", "–ó–∞–º–µ—Ç–∫–∏"
    ])

    for workout in workouts:
        exercises = ", ".join([ex.name for ex in workout.exercises]) if workout.exercises else ""
        sets = workout.exercises[0].sets if workout.exercises else ""
        reps = workout.exercises[0].reps if workout.exercises else ""
        weight = workout.exercises[0].weight if workout.exercises else ""

        writer.writerow([
            workout.date.strftime("%Y-%m-%d %H:%M"),
            workout.type,
            workout.duration,
            workout.calories,
            workout.distance if workout.distance else "",
            exercises,
            sets,
            reps,
            weight,
            workout.notes if workout.notes else ""
        ])

    output.seek(0)
    return output

@router.callback_query(F.data == "show_progress")
async def show_progress(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
    async for session in get_db_session():
        try:
            user = await session.execute(
                select(User).where(User.telegram_id == callback.from_user.id))
            user = user.scalar_one()

            result = await session.execute(
                select(Workout)
                .where(Workout.user_id == user.user_id)
                .order_by(Workout.date)
            )
            workouts = result.scalars().all()  # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ joinedload

            if not workouts:
                await callback.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
                return

            chart = await generate_progress_chart(workouts)
            await callback.message.answer_photo(
                BufferedInputFile(
                    chart.getvalue(),
                    filename="progress_chart.png"
                ),
                caption="–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º"
            )
            await callback.answer()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")