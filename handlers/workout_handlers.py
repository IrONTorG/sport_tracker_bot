import logging
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from datetime import datetime
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from sqlalchemy import select, func, desc, delete
from database.session import get_db_session
from database.models import Workout, Exercise, User
from states import WorkoutStates, EditExerciseStates, EditWorkoutStates, DeleteWorkoutStates
from keyboards.main_menu import get_main_menu, get_workout_pagination_kb
from keyboards.workout_types import get_workout_types
from typing import Dict
from aiogram.fsm.state import State, StatesGroup


class PaginationStates(StatesGroup):
    viewing_workouts = State()


router = Router()

# –¢–∏–ø—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
WORKOUT_TYPES = {
    "üèãÔ∏è‚Äç –°–∏–ª–æ–≤–∞—è": "strength",
    "üèÉ –ë–µ–≥": "running",
    "üö¥ –í–µ–ª–æ—Å–∏–ø–µ–¥": "cycling",
    "üßò –ô–æ–≥–∞": "yoga",
    "üèä –ü–ª–∞–≤–∞–Ω–∏–µ": "swimming",
    "ü§∏ –ü—Ä—ã–∂–∫–∏ –Ω–∞ —Å–∫–∞–∫–∞–ª–∫–µ": "jumping_rope"
}

DISTANCE_WORKOUTS = {"running", "cycling", "swimming"}


def format_exercise_details(exercise: Exercise) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É"""
    return (
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {exercise.name}\n"
        f"–ü–æ–¥—Ö–æ–¥—ã: {exercise.sets}\n"
        f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {exercise.reps}\n"
        f"–í–µ—Å: {exercise.weight} –∫–≥"
    )


@router.message(Command("add"))
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def start_add_workout(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_workout_types()
    )
    await state.set_state(WorkoutStates.waiting_for_type)


@router.message(F.text == "üìã –ú–æ–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
async def show_workouts(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–≤—ã–µ 5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async for session in get_db_session():
        user = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id))
        user = user.scalar_one()

        workouts = await session.execute(
            select(Workout)
            .where(Workout.user_id == user.user_id)
            .order_by(desc(Workout.date))
            .limit(5)
        )
        workouts = workouts.scalars().all()

        if not workouts:
            await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.", reply_markup=get_main_menu(user.is_admin))
            return

        total = await session.execute(
            select(func.count()).select_from(Workout).where(Workout.user_id == user.user_id))
        total = total.scalar()

        await state.update_data(
            current_page=1,
            total_pages=max(1, (total + 4) // 5),
            user_id=user.user_id
        )
        await state.set_state(PaginationStates.viewing_workouts)

        response = await format_workouts_response(workouts, 1, total, session)
        await message.answer(
            response,
            reply_markup=get_workout_pagination_kb(has_prev=False, has_next=total > 5)
        )


async def format_workouts_response(workouts: list, current_page: int, total: int, session) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è"""
    response = f"–í–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {current_page}):\n\n"
    for i, workout in enumerate(workouts, 1):
        response += (
            f"{i}. {workout.type.capitalize()} - "
            f"{workout.date.strftime('%d.%m.%Y %H:%M')}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {workout.duration} –º–∏–Ω.\n"
        )

        if workout.distance:
            response += f"–î–∏—Å—Ç–∞–Ω—Ü–∏—è: {workout.distance} –∫–º\n"

        if workout.type == "strength":
            exercises = await session.execute(
                select(Exercise).where(Exercise.workout_id == workout.workout_id))
            exercises = exercises.scalars().all()
            for ex in exercises:
                response += f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ: {ex.name} ({ex.sets}x{ex.reps} –ø–æ {ex.weight}–∫–≥)\n"

        response += f"–ö–∞–ª–æ—Ä–∏–∏: {workout.calories} –∫–∫–∞–ª\n\n"

    response += f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {total}"
    return response


@router.message(PaginationStates.viewing_workouts, F.text.in_(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚û°Ô∏è –í–ø–µ—Ä–µ–¥"]))
async def paginate_workouts(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"""
    data = await state.get_data()
    current_page = data['current_page']
    total_pages = data['total_pages']
    user_id = data['user_id']

    if message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" and current_page > 1:
        current_page -= 1
    elif message.text == "‚û°Ô∏è –í–ø–µ—Ä–µ–¥" and current_page < total_pages:
        current_page += 1
    else:
        await message.answer("–≠—Ç–æ –∫—Ä–∞–π–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.")
        return

    async for session in get_db_session():
        workouts = await session.execute(
            select(Workout)
            .where(Workout.user_id == user_id)
            .order_by(desc(Workout.date))
            .offset((current_page - 1) * 5)
            .limit(5)
        )
        workouts = workouts.scalars().all()

        total = await session.execute(
            select(func.count()).select_from(Workout).where(Workout.user_id == user_id))
        total = total.scalar()

        await state.update_data(current_page=current_page)

        response = await format_workouts_response(workouts, current_page, total, session)
        await message.answer(
            response,
            reply_markup=get_workout_pagination_kb(
                has_prev=current_page > 1,
                has_next=current_page < total_pages
            )
        )


@router.message(PaginationStates.viewing_workouts, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def add_workout_from_pagination(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    await state.clear()
    await start_add_workout(message, state)


@router.message(PaginationStates.viewing_workouts, F.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def return_to_menu_from_pagination(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞"""
    async for session in get_db_session():
        user = await session.execute(
            select(User).where(User.telegram_id == message.from_user.id))
        user = user.scalar_one()
        await state.clear()
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu(user.is_admin)
        )


@router.message(WorkoutStates.waiting_for_type, F.text.in_(WORKOUT_TYPES.keys()))
async def process_workout_type(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    workout_type = WORKOUT_TYPES[message.text]
    await state.update_data(workout_type=workout_type)

    if workout_type == "strength":
        await message.answer(
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
            reply_markup=ReplyKeyboardRemove()
        )
        await state.set_state(WorkoutStates.waiting_for_exercise_name)
    else:
        if workout_type in DISTANCE_WORKOUTS:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –¥–∏—Å—Ç–∞–Ω—Ü–∏—é –≤ –∫–º:",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(WorkoutStates.waiting_for_distance)
        else:
            await message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö:",
                reply_markup=ReplyKeyboardRemove()
            )
            await state.set_state(WorkoutStates.waiting_for_duration)


@router.message(WorkoutStates.waiting_for_exercise_name)
async def process_exercise_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    await state.update_data(exercise_name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:")
    await state.set_state(WorkoutStates.waiting_for_sets)


@router.message(WorkoutStates.waiting_for_sets)
async def process_sets(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥—Ö–æ–¥–æ–≤"""
    try:
        sets = int(message.text)
        if sets <= 0:
            raise ValueError
        await state.update_data(sets=sets)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:")
        await state.set_state(WorkoutStates.waiting_for_reps)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")


@router.message(WorkoutStates.waiting_for_reps)
async def process_reps(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π"""
    try:
        reps = int(message.text)
        if reps <= 0:
            raise ValueError
        await state.update_data(reps=reps)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å (–∫–≥):")
        await state.set_state(WorkoutStates.waiting_for_weight)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")


@router.message(WorkoutStates.waiting_for_weight)
async def process_weight(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–µ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
    try:
        weight = int(message.text)
        if weight < 0:
            raise ValueError

        data = await state.get_data()
        current_exercises = data.get('exercises', [])

        current_exercises.append({
            'name': data['exercise_name'],
            'sets': data['sets'],
            'reps': data['reps'],
            'weight': weight
        })

        await state.update_data(exercises=current_exercises)

        builder = ReplyKeyboardBuilder()
        builder.row(KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"))
        builder.row(KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"))

        await message.answer(
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(WorkoutStates.waiting_for_more_exercises)

    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0")

@router.message(WorkoutStates.waiting_for_more_exercises, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def add_another_exercise(message: Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(WorkoutStates.waiting_for_exercise_name)

@router.message(WorkoutStates.waiting_for_more_exercises, F.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É")
async def finish_strength_workout(message: Message, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(WorkoutStates.waiting_for_duration)


@router.message(WorkoutStates.waiting_for_duration)
async def process_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        duration = float(message.text)
        if duration <= 0:
            raise ValueError

        await state.update_data(duration=duration)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∂–∂–µ–Ω–Ω—ã—Ö –∫–∞–ª–æ—Ä–∏–π:")
        await state.set_state(WorkoutStates.waiting_for_calories)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")


@router.message(WorkoutStates.waiting_for_distance)
async def process_distance(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏"""
    try:
        distance = float(message.text)
        if distance <= 0:
            raise ValueError

        await state.update_data(distance=distance)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö:")
        await state.set_state(WorkoutStates.waiting_for_duration)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")


@router.message(WorkoutStates.waiting_for_calories)
async def process_calories(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–ª–æ—Ä–∏–π"""
    try:
        calories = float(message.text)
        if calories <= 0:
            raise ValueError

        await state.update_data(calories=calories)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–º–µ—Ç–∫–∏ (–∏–ª–∏ '–Ω–µ—Ç'):")
        await state.set_state(WorkoutStates.waiting_for_notes)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")


@router.message(WorkoutStates.waiting_for_notes)
async def process_notes(message: Message, state: FSMContext):
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    data = await state.get_data()
    async for session in get_db_session():
        try:
            user = await session.execute(
                select(User).where(User.telegram_id == message.from_user.id))
            user = user.scalar_one()

            workout = Workout(
                user_id=user.user_id,
                date=datetime.now(),
                type=data['workout_type'],
                duration=data['duration'],
                distance=data.get('distance', 0),
                calories=data['calories'],
                notes=None if message.text.lower() == '–Ω–µ—Ç' else message.text
            )

            session.add(workout)
            await session.flush()

            if data['workout_type'] == "strength":
                for exercise_data in data.get('exercises', []):
                    exercise = Exercise(
                        workout_id=workout.workout_id,
                        name=exercise_data['name'],
                        sets=exercise_data['sets'],
                        reps=exercise_data['reps'],
                        weight=exercise_data['weight']
                    )
                    session.add(exercise)

            await session.commit()

            response = (
                f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n"
                f"–¢–∏–ø: {data['workout_type']}\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {data['duration']} –º–∏–Ω.\n"
                f"–ö–∞–ª–æ—Ä–∏–∏: {data['calories']} –∫–∫–∞–ª\n"
            )

            if data['workout_type'] == "strength":
                response += "\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
                for i, ex in enumerate(data.get('exercises', []), 1):
                    response += (
                        f"{i}. {ex['name']} - "
                        f"{ex['sets']}x{ex['reps']} –ø–æ {ex['weight']}–∫–≥\n"
                    )

            await message.answer(
                response,
                reply_markup=get_main_menu(user.is_admin)
            )
        except Exception as e:
            await session.rollback()
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu(message.from_user.id)
            )
            logging.error(f"Workout save error: {e}")
        finally:
            await state.clear()


@router.message(PaginationStates.viewing_workouts, F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å")
async def select_workout_to_edit(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    current_page = data['current_page']
    user_id = data['user_id']

    async for session in get_db_session():
        workouts = await session.execute(
            select(Workout)
            .where(Workout.user_id == user_id)
            .order_by(desc(Workout.date))
            .offset((current_page - 1) * 5)
            .limit(5)
        )
        workouts = workouts.scalars().all()

        builder = ReplyKeyboardBuilder()
        for i, workout in enumerate(workouts, 1):
            builder.add(KeyboardButton(text=f"‚úèÔ∏è {i}"))
        builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(EditWorkoutStates.waiting_for_workout_to_edit)
        await state.update_data(workouts=[w.workout_id for w in workouts])


@router.message(EditWorkoutStates.waiting_for_workout_to_edit, F.text.regexp(r'^‚úèÔ∏è\s*\d+$'))
async def select_field_to_edit(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        data = await state.get_data()
        workout_index = int(message.text.split('‚úèÔ∏è')[1].strip()) - 1

        if workout_index < 0 or workout_index >= len(data['workouts']):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
            return

        workout_id = data['workouts'][workout_index]

        async for session in get_db_session():
            workout = await session.get(Workout, workout_id)
            if not workout:
                await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            builder = ReplyKeyboardBuilder()
            fields = ["–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "–ö–∞–ª–æ—Ä–∏–∏", "–ó–∞–º–µ—Ç–∫–∏"]

            if workout.type == "strength":
                fields.append("–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
            elif workout.type in DISTANCE_WORKOUTS:
                fields.append("–î–∏—Å—Ç–∞–Ω—Ü–∏—è")

            for field in fields:
                builder.add(KeyboardButton(text=field))
            builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

            await state.update_data(workout_id=workout_id)
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                reply_markup=builder.as_markup(resize_keyboard=True))
            await state.set_state(EditWorkoutStates.waiting_for_edit_choice)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")


@router.message(EditWorkoutStates.waiting_for_edit_choice)
async def process_edit_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    workout_id = data['workout_id']

    async for session in get_db_session():
        workout = await session.get(Workout, workout_id)

        if message.text == "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è" and workout.type == "strength":
            await handle_edit_exercises(message, state, workout_id)
            return

        field_mapping = {
            "–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏": "type",
            "–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è": "date",
            "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "duration",
            "–î–∏—Å—Ç–∞–Ω—Ü–∏—è": "distance",
            "–ö–∞–ª–æ—Ä–∏–∏": "calories",
            "–ó–∞–º–µ—Ç–∫–∏": "notes"
        }

        if message.text not in field_mapping:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
            return

        field = field_mapping[message.text]
        await state.update_data(edit_field=field)

        prompts = {
            "type": "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            "date": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú):",
            "duration": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω—É—Ç—ã):",
            "distance": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∏—Å—Ç–∞–Ω—Ü–∏—é (–∫–º):",
            "calories": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π:",
            "notes": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–∞–º–µ—Ç–∫–∏:"
        }

        if field == "type":
            await message.answer(
                prompts[field],
                reply_markup=get_workout_types()
            )
        else:
            await message.answer(
                prompts[field],
                reply_markup=ReplyKeyboardRemove()
            )

        await state.set_state(EditWorkoutStates.waiting_for_new_value)


async def handle_edit_exercises(message: Message, state: FSMContext, workout_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
    async for session in get_db_session():
        exercises = await session.execute(
            select(Exercise)
            .where(Exercise.workout_id == workout_id)
            .order_by(Exercise.exercise_id)
        )
        exercises = exercises.scalars().all()

        if not exercises:
            await message.answer("–í —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
            return

        builder = ReplyKeyboardBuilder()
        for i, exercise in enumerate(exercises, 1):
            builder.add(KeyboardButton(text=f"üèãÔ∏è‚Äç –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {i}: {exercise.name}"))
        builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))  # –£–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.update_data(
            exercises=[e.exercise_id for e in exercises],
            workout_id=workout_id
        )
        await state.set_state(EditExerciseStates.waiting_for_exercise_to_edit)


@router.message(EditExerciseStates.waiting_for_exercise_to_edit, F.text.regexp(r'^üèãÔ∏è‚Äç –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ \d+:'))
async def select_exercise_field(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä –ø–æ–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
        exercise_num = int(message.text.split()[2].replace(':', ''))
        data = await state.get_data()
        exercise_id = data['exercises'][exercise_num - 1]

        builder = ReplyKeyboardBuilder()
        fields = [
            "–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
            "–í–µ—Å"
        ]

        for field in fields:
            builder.add(KeyboardButton(text=field))
        builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))
        builder.row(KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"))

        await state.update_data(
            exercise_id=exercise_id,
            exercise_index=exercise_num - 1
        )
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(EditExerciseStates.waiting_for_exercise_field)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")


@router.message(EditWorkoutStates.waiting_for_workout_to_edit, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(EditWorkoutStates.waiting_for_edit_choice, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(EditWorkoutStates.waiting_for_new_value, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(EditExerciseStates.waiting_for_exercise_to_edit, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(EditExerciseStates.waiting_for_exercise_field, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
@router.message(EditExerciseStates.waiting_for_new_exercise_value, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_edit(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await state.clear()
    await show_workouts(message, state)


@router.message(EditExerciseStates.waiting_for_exercise_field)
async def process_exercise_field_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    if message.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ":
        await delete_exercise(message, state)
        return

    field_mapping = {
        "–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è": "name",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤": "sets",
        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π": "reps",
        "–í–µ—Å": "weight"
    }

    if message.text not in field_mapping:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    field = field_mapping[message.text]
    await state.update_data(exercise_field=field)

    prompts = {
        "name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
        "sets": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤:",
        "reps": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π:",
        "weight": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–∫–≥):"
    }

    await message.answer(
        prompts[field],
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(EditExerciseStates.waiting_for_new_exercise_value)


async def delete_exercise(message: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
    data = await state.get_data()
    exercise_id = data['exercise_id']
    workout_id = data['workout_id']

    try:
        async for session in get_db_session():
            exercise = await session.get(Exercise, exercise_id)
            await session.delete(exercise)
            await session.commit()
            await message.answer("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")

            remaining = await session.execute(
                select(Exercise).where(Exercise.workout_id == workout_id))
            remaining = remaining.scalars().all()

            if not remaining:
                await message.answer("–í —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –±–æ–ª—å—à–µ –Ω–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.")
                await state.set_state(None)
                await show_workouts(message, state)
            else:
                await handle_edit_exercises(message, state, workout_id)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.")


@router.message(EditExerciseStates.waiting_for_new_exercise_value)
async def save_edited_exercise(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–∏"""
    data = await state.get_data()
    field = data['exercise_field']
    exercise_id = data['exercise_id']
    workout_id = data['workout_id']

    try:
        async for session in get_db_session():
            exercise = await session.get(Exercise, exercise_id)

            if field in ["sets", "reps", "weight"]:
                try:
                    value = int(message.text)
                    if value <= 0:
                        raise ValueError
                    setattr(exercise, field, value)
                except ValueError:
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
                    return
            else:
                setattr(exercise, field, message.text)

            await session.commit()
            await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

            await state.set_state(EditExerciseStates.waiting_for_exercise_field)
            await select_exercise_field(message, state)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")


@router.message(EditExerciseStates.waiting_for_exercise_to_edit, F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ")
async def add_new_exercise(message: Message, state: FSMContext):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∫ —Å–∏–ª–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ"""
    data = await state.get_data()
    workout_id = data['workout_id']

    await state.update_data(
        workout_id=workout_id,
        is_new_exercise=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:",
        reply_markup=ReplyKeyboardRemove()
    )
    await state.set_state(WorkoutStates.waiting_for_exercise_name)


@router.message(EditWorkoutStates.waiting_for_new_value)
async def save_edited_field(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è"""
    data = await state.get_data()
    workout_id = data['workout_id']
    field = data['edit_field']

    try:
        async for session in get_db_session():
            workout = await session.get(Workout, workout_id)

            if field == "type":
                if message.text not in WORKOUT_TYPES:
                    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏–∑ —Å–ø–∏—Å–∫–∞.")
                    return
                setattr(workout, field, WORKOUT_TYPES[message.text])

            elif field == "date":
                try:
                    new_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
                    setattr(workout, field, new_date)
                except ValueError:
                    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
                    return

            elif field in ["duration", "distance", "calories"]:
                try:
                    value = float(message.text)
                    if value <= 0:
                        raise ValueError
                    setattr(workout, field, value)
                except ValueError:
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.")
                    return

            elif field == "notes":
                setattr(workout, field, message.text if message.text.lower() != "–Ω–µ—Ç" else None)

            await session.commit()
            await message.answer("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

            await state.set_state(None)
            await show_workouts(message, state)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")


@router.message(PaginationStates.viewing_workouts, F.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å")
async def select_workout_to_delete(message: Message, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    current_page = data['current_page']
    user_id = data['user_id']

    async for session in get_db_session():
        workouts = await session.execute(
            select(Workout)
            .where(Workout.user_id == user_id)
            .order_by(desc(Workout.date))
            .offset((current_page - 1) * 5)
            .limit(5)
        )
        workouts = workouts.scalars().all()

        builder = ReplyKeyboardBuilder()
        for i, workout in enumerate(workouts, 1):
            builder.add(KeyboardButton(text=f"üóëÔ∏è {i}"))
        builder.row(KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞"))

        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=builder.as_markup(resize_keyboard=True)
        )
        await state.set_state(DeleteWorkoutStates.waiting_for_workout_to_delete)
        await state.update_data(workouts=[w.workout_id for w in workouts])


@router.message(DeleteWorkoutStates.waiting_for_workout_to_delete, F.text.regexp(r'^üóëÔ∏è\s*\d+$'))
async def confirm_delete_workout(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    try:
        workout_index = int(message.text.split('üóëÔ∏è')[1].strip()) - 1
        data = await state.get_data()

        if workout_index < 0 or workout_index >= len(data['workouts']):
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")
            return

        workout_id = data['workouts'][workout_index]

        async for session in get_db_session():
            workout = await session.get(Workout, workout_id)
            if not workout:
                await message.answer("–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            response = (
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É?\n\n"
                f"–¢–∏–ø: {workout.type}\n"
                f"–î–∞—Ç–∞: {workout.date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {workout.duration} –º–∏–Ω.\n"
            )

            if workout.type == "strength":
                exercises = await session.execute(
                    select(Exercise).where(Exercise.workout_id == workout.workout_id))
                exercises = exercises.scalars().all()

                if exercises:
                    response += "\n–£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:\n"
                    for i, ex in enumerate(exercises, 1):
                        response += f"{i}. {ex.name} ({ex.sets}x{ex.reps} –ø–æ {ex.weight}–∫–≥)\n"

            builder = ReplyKeyboardBuilder()
            builder.row(KeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"))
            builder.row(KeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å"))

            await state.update_data(workout_id=workout_id)
            await message.answer(
                response,
                reply_markup=builder.as_markup(resize_keyboard=True)
            )
            await state.set_state(DeleteWorkoutStates.waiting_for_delete_confirmation)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")


@router.message(DeleteWorkoutStates.waiting_for_delete_confirmation, F.text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å")
async def delete_workout_confirmed(message: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = await state.get_data()
    workout_id = data['workout_id']

    try:
        async for session in get_db_session():
            # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ —ç—Ç–æ —Å–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞)
            await session.execute(
                delete(Exercise).where(Exercise.workout_id == workout_id))

            # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–∞–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
            await session.execute(
                delete(Workout).where(Workout.workout_id == workout_id))

            await session.commit()

            await message.answer(
                "‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                reply_markup=get_main_menu()
            )
            await state.clear()

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
            await show_workouts(message, state)

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.")


@router.message(DeleteWorkoutStates.waiting_for_delete_confirmation, F.text == "‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å")
@router.message(DeleteWorkoutStates.waiting_for_workout_to_delete, F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_delete_workout(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"""
    await state.clear()
    await show_workouts(message, state)