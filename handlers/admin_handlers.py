import logging
from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from sqlalchemy import select, func
from sqlalchemy.ext.asyncio import AsyncSession
from database.models import User, Workout, Exercise
from database.session import get_db_session
from keyboards.admin import (
    admin_panel_kb, ban_confirm_kb, users_list_kb,
    user_actions_kb, stats_options_kb, export_format_kb
)
from aiogram.fsm.context import FSMContext
from ml.predictor import predict_future_workouts

from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
from states import AdminStates
import io
import csv
import json
from aiogram.types.input_file import BufferedInputFile

router = Router()


async def get_user(session: AsyncSession, telegram_id: int):
    result = await session.execute(select(User).where(User.telegram_id == telegram_id))
    return result.scalars().first()


async def get_user_stats(session: AsyncSession, user_id: int):
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    workouts_count = await session.execute(
        select(func.count(Workout.workout_id)).where(Workout.user_id == user_id))
    workouts_count = workouts_count.scalar()

    total_duration = await session.execute(
        select(func.sum(Workout.duration)).where(Workout.user_id == user_id))
    total_duration = total_duration.scalar() or 0

    total_calories = await session.execute(
        select(func.sum(Workout.calories)).where(Workout.user_id == user_id))
    total_calories = total_calories.scalar() or 0

    return {
        'workouts_count': workouts_count,
        'total_duration': total_duration,
        'total_calories': total_calories
    }


async def get_global_stats(session: AsyncSession):
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    users_count = await session.execute(select(func.count(User.user_id)))
    users_count = users_count.scalar()

    workouts_count = await session.execute(select(func.count(Workout.workout_id)))
    workouts_count = workouts_count.scalar()

    total_duration = await session.execute(select(func.sum(Workout.duration)))
    total_duration = total_duration.scalar() or 0

    total_calories = await session.execute(select(func.sum(Workout.calories)))
    total_calories = total_calories.scalar() or 0

    return {
        'users_count': users_count,
        'workouts_count': workouts_count,
        'total_duration': total_duration,
        'total_calories': total_calories
    }


@router.message(Command("admin"))
async def admin_panel(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin"""
    async for session in get_db_session():
        try:
            user = await get_user(session, message.from_user.id)
            if not user or not user.is_admin:
                return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
            await message.answer("üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_panel_kb())
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
            logging.error(f"Admin panel error: {e}")


@router.callback_query(F.data == "admin_ban")
async def show_ban_menu(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –∏–ª–∏ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (@username):"
    )
    await state.set_state(AdminStates.waiting_for_ban_user)


@router.callback_query(F.data == "admin_users_list")
async def show_users_list(callback: CallbackQuery, page: int = 1):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    await callback.answer()
    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
            users_per_page = 5
            offset = (page - 1) * users_per_page

            total_users = await session.execute(select(func.count(User.user_id)))
            total_users = total_users.scalar()
            total_pages = (total_users + users_per_page - 1) // users_per_page

            users = await session.execute(
                select(User)
                .order_by(User.registration_date.desc())
                .offset(offset)
                .limit(users_per_page)
            )
            users = users.scalars().all()

            await callback.message.answer(
                f"üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{total_pages}):",
                reply_markup=users_list_kb(users, page, total_pages)
            )
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            logging.error(f"Users list error: {e}")


@router.callback_query(F.data.startswith("users_page_"))
async def handle_users_page(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    page = int(callback.data.split("_")[-1])
    await show_users_list(callback, page)


@router.callback_query(F.data.startswith("user_select_"))
async def handle_user_select(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞"""
    await callback.answer()
    user_id = int(callback.data.split("_")[-1])

    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            user = await get_user(session, user_id)
            if not user:
                return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

            stats = await get_user_stats(session, user.user_id)

            await callback.message.answer(
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
                f"ID: {user.user_id}\n"
                f"Telegram ID: {user.telegram_id}\n"
                f"–ò–º—è: {user.name}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                f"–ë–∞–Ω: {'–î–∞' if user.is_banned else '–ù–µ—Ç'}\n\n",


                reply_markup=user_actions_kb(user.telegram_id, user.is_banned, user.is_admin)
            )
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
            logging.error(f"User select error: {e}")


@router.message(AdminStates.waiting_for_ban_user)
async def process_ban_user(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞"""
    user_input = message.text.strip()

    async for session in get_db_session():
        try:
            admin = await get_user(session, message.from_user.id)
            if not admin or not admin.is_admin:
                return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")

            user = None
            if user_input.isdigit():
                # –ü–æ–∏—Å–∫ –ø–æ telegram_id
                user = await session.execute(
                    select(User).where(User.telegram_id == int(user_input)))
                user = user.scalars().first()
            elif user_input.startswith("@"):
                # –ü–æ–∏—Å–∫ –ø–æ username
                username = user_input[1:]
                user = await session.execute(
                    select(User).where(User.username == username))
                user = user.scalars().first()

                if not user:
                    return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

            await message.answer(
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ {'—Ä–∞–∑–±–∞–Ω–∏—Ç—å' if user.is_banned else '–∑–∞–±–∞–Ω–∏—Ç—å'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}?",
                reply_markup=ban_confirm_kb(user.telegram_id, user.is_banned)
            )
            await state.clear()

        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            logging.error(f"Ban process error: {e}")

@router.callback_query(F.data.startswith("ban_confirm_"))
async def process_ban_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞"""
    await callback.answer()
    user_id = int(callback.data.split("_")[-1])

    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id
            user = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user.scalars().first()

            if not user:
                return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞
            user.is_banned = not user.is_banned
            await session.commit()

            action = "–∑–∞–±–∞–Ω–µ–Ω" if user.is_banned else "—Ä–∞–∑–±–∞–Ω–µ–Ω"
            await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} (ID: {user_id}) {action}.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            stats = await get_user_stats(session, user.user_id)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å" if user.is_banned else "üõë –ó–∞–±–∞–Ω–∏—Ç—å",
                    callback_data=f"admin_ban_{user.telegram_id}"
                ),
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=f"admin_user_stats_{user.telegram_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
                    callback_data=f"admin_message_{user.telegram_id}"
                ),
                InlineKeyboardButton(
                    text="üëë –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞" if user.is_admin else "üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º",
                    callback_data=f"admin_promote_{user.telegram_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_back"
                )
            )

            await callback.message.edit_text(
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
                f"ID: {user.user_id}\n"
                f"Telegram ID: {user.telegram_id}\n"
                f"–ò–º—è: {user.name}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                f"–ë–∞–Ω: {'–î–∞' if user.is_banned else '–ù–µ—Ç'}\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['workouts_count']}\n"
                f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']} –º–∏–Ω\n"
                f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {stats['total_calories']}",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await session.rollback()
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–Ω–∞")
            logging.error(f"Ban process error: {e}", exc_info=True)


@router.callback_query(F.data == "admin_stats")
async def show_stats_options(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.answer()
    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            await callback.message.answer(
                "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
                reply_markup=stats_options_kb()
            )
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            logging.error(f"Stats error: {e}")


@router.callback_query(F.data == "stats_numbers")
async def show_global_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    await callback.answer()
    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            stats = await get_global_stats(session)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–∞–∑–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
            top_duration = await session.execute(
                select(User.name, func.sum(Workout.duration).label('total'))
                .join(Workout)
                .group_by(User.user_id)
                .order_by(func.sum(Workout.duration).desc())
                .limit(5)
            )
            top_duration = top_duration.all()

            top_calories = await session.execute(
                select(User.name, func.sum(Workout.calories).label('total'))
                .join(Workout)
                .group_by(User.user_id)
                .order_by(func.sum(Workout.calories).desc())
                .limit(5)
            )
            top_calories = top_calories.all()

            top_workouts = await session.execute(
                select(User.name, func.count(Workout.workout_id).label('total'))
                .join(Workout)
                .group_by(User.user_id)
                .order_by(func.count(Workout.workout_id).desc())
                .limit(5)
            )
            top_workouts = top_workouts.all()

            message = (
                "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['users_count']}\n"
                f"üèãÔ∏è –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['workouts_count']}\n"
                f"‚è±Ô∏è –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']} –º–∏–Ω\n"
                f"üî• –°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {stats['total_calories']}\n\n"
                "üèÜ –¢–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
                "–ü–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
            )

            for i, (name, total) in enumerate(top_duration, 1):
                message += f"{i}. {name}: {total} –º–∏–Ω\n"

            message += "\n–ü–æ —Å–æ–∂–∂—ë–Ω–Ω—ã–º –∫–∞–ª–æ—Ä–∏—è–º:\n"
            for i, (name, total) in enumerate(top_calories, 1):
                message += f"{i}. {name}: {total} –∫–∞–ª\n"

            message += "\n–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
            for i, (name, total) in enumerate(top_workouts, 1):
                message += f"{i}. {name}: {total}\n"

            await callback.message.answer(message)
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            logging.error(f"Global stats error: {e}")


@router.callback_query(F.data == "stats_graph")
async def generate_stats_graph(callback: CallbackQuery, bot: Bot):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ–∏–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.answer()
    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            workouts_by_date = await session.execute(
                select(
                    func.date(Workout.date).label('day'),
                    func.count(Workout.workout_id).label('count')
                )
                .group_by(func.date(Workout.date))
                .order_by(func.date(Workout.date))
            )
            workouts_by_date = workouts_by_date.all()

            if not workouts_by_date:
                return await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")

            plt.switch_backend('Agg')
            plt.figure(figsize=(10, 5))

            dates = [row.day for row in workouts_by_date]
            counts = [row.count for row in workouts_by_date]

            plt.plot(dates, counts, marker='o', linestyle='-')
            plt.title('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –¥–Ω—è–º')
            plt.xlabel('–î–∞—Ç–∞')
            plt.ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫')
            plt.xticks(rotation=45)
            plt.grid(True)
            plt.tight_layout()

            temp_file = io.BytesIO()
            plt.savefig(temp_file, format='png', dpi=80)
            temp_file.seek(0)
            plt.close()

            input_file = BufferedInputFile(temp_file.read(), filename="workouts_graph.png")

            await bot.send_photo(
                chat_id=callback.from_user.id,
                photo=input_file,
                caption="üìà –ì—Ä–∞—Ñ–∏–∫ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ –¥–Ω—è–º"
            )

        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞")
            logging.error(f"Graph generation error: {e}", exc_info=True)




@router.callback_query(F.data == "stats_export")
async def ask_export_format(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await callback.answer()
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:",
        reply_markup=export_format_kb()
    )
    await state.set_state(AdminStates.waiting_for_export_format)


@router.callback_query(F.data.startswith("export_"))
async def export_data(callback: CallbackQuery, bot: Bot):
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    await callback.answer()
    export_format = callback.data.split("_")[-1]

    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            workouts = await session.execute(
                select(Workout, User)
                .join(User)
                .order_by(Workout.date)
            )
            workouts = workouts.all()

            if not workouts:
                return await callback.message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")

            if export_format == "csv":
                buf = io.StringIO()
                writer = csv.writer(buf, delimiter=';', quoting=csv.QUOTE_MINIMAL)

                # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                writer.writerow([
                    "ID",
                    "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                    "–î–∞—Ç–∞",
                    "–¢–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
                    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º–∏–Ω)",
                    "–î–∏—Å—Ç–∞–Ω—Ü–∏—è (–∫–º)",
                    "–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π (–∫–∫–∞–ª)",
                    "–ó–∞–º–µ—Ç–∫–∏"
                ])

                for workout, user in workouts:
                    writer.writerow([
                        workout.workout_id,
                        user.name,
                        workout.date.strftime('%Y-%m-%d %H:%M'),
                        workout.type,
                        f"{workout.duration} –º–∏–Ω" if workout.duration else "",
                        f"{workout.distance} –∫–º" if workout.distance else "",
                        f"{workout.calories} –∫–∫–∞–ª" if workout.calories else "",
                        workout.notes or ""
                    ])

                buf.seek(0)
                csv_data = buf.getvalue().encode('utf-8-sig')
                file = BufferedInputFile(csv_data, filename="workouts_export.csv")

                await bot.send_document(
                    chat_id=callback.from_user.id,
                    document=file,
                    caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"
                )

            elif export_format == "json":
                data = []
                for workout, user in workouts:
                    data.append({
                        "id": workout.workout_id,
                        "user": user.name,
                        "date": workout.date.strftime('%Y-%m-%d %H:%M'),
                        "type": workout.type,
                        "duration": workout.duration,
                        "distance": workout.distance,
                        "calories": workout.calories,
                        "notes": workout.notes
                    })

                json_data = json.dumps(data, indent=2, ensure_ascii=False).encode('utf-8')
                file = BufferedInputFile(json_data, filename="workouts_export.json")

                await bot.send_document(
                    chat_id=callback.from_user.id,
                    document=file,
                    caption="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ JSON"
                )

        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
            logging.error(f"Export error: {e}", exc_info=True)


@router.callback_query(F.data == "admin_search_user")
async def ask_user_search(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    await callback.answer()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ —á–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞:"
    )
    await state.set_state(AdminStates.waiting_for_user_search)


@router.message(AdminStates.waiting_for_user_search)
async def process_user_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    search_term = message.text.strip()
    if search_term.startswith("@"):
        search_term = search_term[1:]

    async for session in get_db_session():
        try:
            admin = await get_user(session, message.from_user.id)
            if not admin or not admin.is_admin:
                return await message.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")

            users = await session.execute(
                select(User)
                .where(User.name.ilike(f"%{search_term}%"))
                .limit(10)
            )
            users = users.scalars().all()

            if not users:
                return await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

            builder = InlineKeyboardBuilder()
            for user in users:
                builder.row(
                    InlineKeyboardButton(
                        text=f"{user.name} (ID: {user.telegram_id})",
                        callback_data=f"user_select_{user.telegram_id}"
                    )
                )

            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_back"
                )
            )

            await message.answer(
                f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}':",
                reply_markup=builder.as_markup()
            )
            await state.clear()
        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            logging.error(f"User search error: {e}")


@router.callback_query(F.data == "admin_back")
async def handle_admin_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.answer()
    await callback.message.edit_text(
        "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_panel_kb()
    )

@router.message(F.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def admin_panel_button(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    await admin_panel(message)

@router.callback_query(F.data == "stats_back")
async def handle_stats_back(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
        reply_markup=stats_options_kb()
    )

@router.callback_query(F.data == "ban_cancel")
async def handle_ban_cancel(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –±–∞–Ω–∞"""
    await callback.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.delete()


@router.callback_query(F.data.startswith("admin_user_stats_"))
async def show_user_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    user_id = int(callback.data.split("_")[-1])

    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            user = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user.scalars().first()

            if not user:
                return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

            stats = await get_user_stats(session, user.user_id)

            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            top_workouts = await session.execute(
                select(Workout)
                .where(Workout.user_id == user.user_id)
                .order_by(Workout.duration.desc())
                .limit(5)
            )
            top_workouts = top_workouts.scalars().all()

            message = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}:\n"
                f"–í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['workouts_count']}\n"
                f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']} –º–∏–Ω\n"
                f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {stats['total_calories']}\n\n"
                "üèÜ –¢–æ–ø-5 —Å–∞–º—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n"
            )

            for i, workout in enumerate(top_workouts, 1):
                message += (
                    f"{i}. {workout.type} - {workout.duration} –º–∏–Ω "
                    f"({workout.date.strftime('%d.%m.%Y')})\n"
                )

            await callback.message.answer(
                message,
                reply_markup=user_actions_kb(user.telegram_id, user.is_banned, user.is_admin)
            )
        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            logging.error(f"User stats error: {e}", exc_info=True)


@router.callback_query(F.data.startswith("admin_promote_"))
async def promote_user(callback: CallbackQuery):
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –∏–ª–∏ —Å–Ω–∏–º–∞–µ—Ç –∞–¥–º–∏–Ω–∞"""
    await callback.answer()
    user_id = int(callback.data.split("_")[-1])

    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            user = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user.scalars().first()

            if not user:
                return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–¥–º–∏–Ω–∞
            user.is_admin = not user.is_admin
            await session.commit()

            action = "–Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–æ–º" if user.is_admin else "—Å–Ω—è—Ç —Å –∞–¥–º–∏–Ω–∫–∏"
            await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} {action}.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            stats = await get_user_stats(session, user.user_id)

            builder = InlineKeyboardBuilder()
            builder.row(
                InlineKeyboardButton(
                    text="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å" if user.is_banned else "üõë –ó–∞–±–∞–Ω–∏—Ç—å",
                    callback_data=f"admin_ban_{user.telegram_id}"
                ),
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data=f"admin_user_stats_{user.telegram_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
                    callback_data=f"admin_message_{user.telegram_id}"
                ),
                InlineKeyboardButton(
                    text="üëë –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞" if user.is_admin else "üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º",
                    callback_data=f"admin_promote_{user.telegram_id}"
                )
            )
            builder.row(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data="admin_back"
                )
            )

            await callback.message.edit_text(
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
                f"ID: {user.user_id}\n"
                f"Telegram ID: {user.telegram_id}\n"
                f"–ò–º—è: {user.name}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                f"–ë–∞–Ω: {'–î–∞' if user.is_banned else '–ù–µ—Ç'}\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['workouts_count']}\n"
                f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']} –º–∏–Ω\n"
                f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {stats['total_calories']}",
                reply_markup=builder.as_markup()
            )
        except Exception as e:
            await session.rollback()
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∞")
            logging.error(f"Promote error: {e}", exc_info=True)


@router.callback_query(F.data.startswith("admin_message_"))
async def ask_message_to_user(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    user_id = int(callback.data.split("_")[-1])

    await state.update_data(target_user_id=user_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:"
    )
    await state.set_state(AdminStates.waiting_for_user_message)


@router.message(AdminStates.waiting_for_user_message)
async def send_message_to_user(message: Message, state: FSMContext, bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    data = await state.get_data()
    user_id = data.get("target_user_id")
    text = message.text

    try:
        await bot.send_message(
            chat_id=user_id,
            text=f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{text}"
        )
        await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
    except Exception as e:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {str(e)}")

    await state.clear()

@router.callback_query(F.data.startswith("admin_ban_"))
async def ban_user(callback: CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–∞–Ω/—Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    user_id = int(callback.data.split("_")[-1])

    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            user = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user.scalars().first()

            if not user:
                return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            await callback.message.answer(
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ {'—Ä–∞–∑–±–∞–Ω–∏—Ç—å' if user.is_banned else '–∑–∞–±–∞–Ω–∏—Ç—å'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}?",
                reply_markup=ban_confirm_kb(user.telegram_id, user.is_banned)
            )

        except Exception as e:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
            logging.error(f"Ban request error: {e}")

@router.callback_query(F.data.startswith("ban_confirm_"))
async def confirm_ban(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    user_id = int(callback.data.split("_")[-1])

    async for session in get_db_session():
        try:
            admin = await get_user(session, callback.from_user.id)
            if not admin or not admin.is_admin:
                return await callback.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!", show_alert=True)

            user = await session.execute(
                select(User).where(User.telegram_id == user_id)
            )
            user = user.scalars().first()

            if not user:
                return await callback.message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

            # –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞–Ω–∞
            user.is_banned = not user.is_banned
            await session.commit()

            action = "–∑–∞–±–∞–Ω–µ–Ω" if user.is_banned else "—Ä–∞–∑–±–∞–Ω–µ–Ω"
            await callback.message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} {action}.")

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            stats = await get_user_stats(session, user.user_id)
            await callback.message.answer(
                f"üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
                f"ID: {user.user_id}\n"
                f"Telegram ID: {user.telegram_id}\n"
                f"–ò–º—è: {user.name}\n"
                f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date.strftime('%d.%m.%Y %H:%M')}\n"
                f"–°—Ç–∞—Ç—É—Å: {'–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' if user.is_admin else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n"
                f"–ë–∞–Ω: {'–î–∞' if user.is_banned else '–ù–µ—Ç'}\n\n"
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats['workouts_count']}\n"
                f"–û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {stats['total_duration']} –º–∏–Ω\n"
                f"–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π: {stats['total_calories']}",
                reply_markup=user_actions_kb(user.telegram_id, user.is_banned, user.is_admin)
            )

        except Exception as e:
            await session.rollback()
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–Ω–∞")
            logging.error(f"Ban process error: {e}")