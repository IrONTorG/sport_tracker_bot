from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def admin_panel_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="üõë –ë–∞–Ω/–†–∞–∑–±–∞–Ω",
            callback_data="admin_ban"
        ),
        InlineKeyboardButton(
            text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            callback_data="admin_users_list"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
            callback_data="admin_search_user"
        ),
        InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data="admin_stats"
        )
    )

    return builder.as_markup()


def users_list_kb(users: list, page: int, total_pages: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    builder = InlineKeyboardBuilder()

    for user in users:
        builder.row(
            InlineKeyboardButton(
                text=f"üë§ {user.name} (ID: {user.telegram_id})",
                callback_data=f"user_select_{user.telegram_id}"
            )
        )

    # –ö–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_row = []
    if page > 1:
        pagination_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"users_page_{page - 1}"))

    pagination_row.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="current_page"))

    if page < total_pages:
        pagination_row.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"users_page_{page + 1}"))

    builder.row(*pagination_row)

    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data="admin_back"
        )
    )

    return builder.as_markup()


def ban_confirm_kb(user_id: int, is_banned: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –±–∞–Ω–∞/—Ä–∞–∑–±–∞–Ω–∞"""
    builder = InlineKeyboardBuilder()

    action = "—Ä–∞–∑–±–∞–Ω–∏—Ç—å" if is_banned else "–∑–∞–±–∞–Ω–∏—Ç—å"

    builder.row(
        InlineKeyboardButton(
            text=f"‚úÖ –î–∞, {action}",
            callback_data=f"ban_confirm_{user_id}"
        ),
        InlineKeyboardButton(
            text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å",
            callback_data="admin_back"
        )
    )

    return builder.as_markup()


def user_actions_kb(user_id: int, is_banned: bool, is_admin: bool) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    builder = InlineKeyboardBuilder()

    ban_text = "üîì –†–∞–∑–±–∞–Ω–∏—Ç—å" if is_banned else "üõë –ó–∞–±–∞–Ω–∏—Ç—å"
    admin_text = "üëë –°–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞" if is_admin else "üëë –°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–æ–º"

    builder.row(
        InlineKeyboardButton(
            text=ban_text,
            callback_data=f"admin_ban_{user_id}"
        ),
        InlineKeyboardButton(
            text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            callback_data=f"admin_user_stats_{user_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚úâÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å",
            callback_data=f"admin_message_{user_id}"
        ),
        InlineKeyboardButton(
            text=admin_text,
            callback_data=f"admin_promote_{user_id}"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data="admin_back"
        )
    )

    return builder.as_markup()


def stats_options_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–ø—Ü–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="üìà –ì—Ä–∞—Ñ–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫",
            callback_data="stats_graph"
        ),
        InlineKeyboardButton(
            text="üìä –û–±—â–∏–µ —Ü–∏—Ñ—Ä—ã",
            callback_data="stats_numbers"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö",
            callback_data="stats_export"
        ),
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data="admin_back"
        )
    )

    return builder.as_markup()


def export_format_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    builder = InlineKeyboardBuilder()

    builder.row(
        InlineKeyboardButton(
            text="CSV",
            callback_data="export_csv"
        ),
        InlineKeyboardButton(
            text="JSON",
            callback_data="export_json"
        )
    )
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data="stats_back"
        )
    )

    return builder.as_markup()


def stats_back_kb() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            callback_data="stats_back"
        )
    )
    return builder.as_markup()


def admin_back_kb() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å",
            callback_data="admin_back"
        )
    )
    return builder.as_markup()