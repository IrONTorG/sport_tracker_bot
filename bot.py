import logging
import asyncio


from aiogram import Bot, Dispatcher
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand
from config import Config
from database.session import engine, Base, check_db_connection, get_db_session
from database.models import Reminder, User  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç Reminder
from handlers import user_handlers, admin_handlers, workout_handlers, reminder_handlers, stats_handlers
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, time
import pytz
from sqlalchemy import select, func
import os


async def send_reminders(bot: Bot):
    tz = pytz.timezone('Europe/Moscow')
    now = datetime.now(tz)
    current_time = now.time().replace(second=0, microsecond=0)
    current_day = now.strftime("%A")

    day_mapping = {
        "Monday": "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        "Tuesday": "–≤—Ç–æ—Ä–Ω–∏–∫",
        "Wednesday": "—Å—Ä–µ–¥–∞",
        "Thursday": "—á–µ—Ç–≤–µ—Ä–≥",
        "Friday": "–ø—è—Ç–Ω–∏—Ü–∞",
        "Saturday": "—Å—É–±–±–æ—Ç–∞",
        "Sunday": "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }
    current_day_ru = day_mapping.get(current_day, current_day)

    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {current_time} ({current_day}/{current_day_ru})")

    try:
        async for session in get_db_session():
            # –ò—â–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–Ω—è
            stmt = select(Reminder).join(User).where(
                (Reminder.day_of_week == current_day) | (Reminder.day_of_week == current_day_ru),
                func.time(Reminder.reminder_time) == current_time,
                User.is_banned == False
            )

            result = await session.execute(stmt)
            reminders = result.scalars().all()

            # –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã User
            for reminder in reminders:
                await session.refresh(reminder, ['user'])  # –Ø–≤–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ

            for reminder in reminders:
                try:
                    if reminder.user:  # –¢–µ–ø–µ—Ä—å user –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω
                        await bot.send_message(
                            chat_id=reminder.user.telegram_id,
                            text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:\n{reminder.reminder_text}"
                        )
                        logging.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {reminder.user.telegram_id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {str(e)}", exc_info=True)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {str(e)}", exc_info=True)




async def on_startup(bot: Bot):


    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

    scheduler.add_job(
        send_reminders,
        'interval',
        seconds=10,  # –î–ª—è —Ç–µ—Å—Ç–∞
        args=[bot],
        next_run_time=datetime.now()
    )

    scheduler.start()

    await bot.set_my_commands([
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand(command="add", description="–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É"),
        BotCommand(command="remind", description="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏"),
        BotCommand(command="admin", description="–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)")
    ])
    logging.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")


async def on_shutdown(dp: Dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –±–æ—Ç–∞"""
    logging.warning("üõë –í—ã–∫–ª—é—á–∞–µ–º—Å—è...")
    await dp.storage.close()
    await dp.fsm.storage.close()
    await engine.dispose()


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - %(message)s",
    )

    bot = Bot(
        token=Config.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode="HTML")
    )
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.include_router(user_handlers.router)
    dp.include_router(admin_handlers.router)
    dp.include_router(workout_handlers.router)
    dp.include_router(reminder_handlers.router)
    dp.include_router(stats_handlers.router)

    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())